PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE users (user_id INTEGER  PRIMARY KEY AUTOINCREMENT DEFAULT 0,date_joined Date DEFAULT NULL,nickname Varchar(255) DEFAULT NULL,full_name Varchar(255) DEFAULT NULL,date_of_birth Date DEFAULT NULL,gender Varchar(255) DEFAULT NULL,city Varchar(255) DEFAULT NULL,country Varchar(255) DEFAULT NULL,unit Varchar(255) DEFAULT NULL,avatar Varchar(255));
CREATE TABLE units (unit_id INTEGER  NOT NULL  PRIMARY KEY AUTOINCREMENT DEFAULT 0,unit_name Varchar(255) DEFAULT NULL);
CREATE TABLE meal_types (meal_type_id INTEGER  NOT NULL  PRIMARY KEY AUTOINCREMENT DEFAULT 0,meal_type_name Varchar(255) DEFAULT NULL);
CREATE TABLE heart (heart_id INTEGER  NOT NULL  PRIMARY KEY AUTOINCREMENT DEFAULT 0,user_id INTEGER  NOT NULL DEFAULT 0,log_date Date DEFAULT NULL,heart_rate Smallint DEFAULT NULL,tracker Varchar(255) DEFAULT NULL);
CREATE TABLE sleep (sleep_id INTEGER  NOT NULL  PRIMARY KEY AUTOINCREMENT DEFAULT 0,user_id INTEGER  NOT NULL DEFAULT 0 CONSTRAINT fk_users_id REFERENCES users(user_id) ON DELETE CASCADE,log_date Date DEFAULT NULL,awakenings Smallint DEFAULT NULL,duration INTEGER DEFAULT NULL,efficiency Smallint DEFAULT NULL,minutes_to_fall_asleep Smallint DEFAULT NULL,minutes_awake Smallint DEFAULT NULL,minutes_asleep Smallint DEFAULT NULL,minutes_after_wakeup Smallint DEFAULT NULL,start_time Date DEFAULT NULL,time_in_bed Smallint DEFAULT NULL);
CREATE TABLE glucose (glucose_id INTEGER  NOT NULL  PRIMARY KEY AUTOINCREMENT DEFAULT 0,user_id INTEGER  NOT NULL DEFAULT 0 CONSTRAINT fk_users_id REFERENCES users(user_id) ON DELETE CASCADE,log_date Date DEFAULT NULL,glucose Smallint DEFAULT NULL,tracker Varchar(255) DEFAULT NULL);
CREATE TABLE foods (foods_id INTEGER  NOT NULL  PRIMARY KEY AUTOINCREMENT DEFAULT 0,user_id INTEGER  NOT NULL DEFAULT 0 CONSTRAINT fk_users_id REFERENCES users(user_id) ON DELETE CASCADE,log_date Date DEFAULT NULL,name Varchar(255) DEFAULT NULL,amount Smallint DEFAULT NULL,unit_type INTEGER DEFAULT NULL,meal_type INTEGER DEFAULT NULL,calories Smallint DEFAULT NULL,carbs Smallint DEFAULT NULL,fat Smallint DEFAULT NULL,fiber Smallint DEFAULT NULL,protein Smallint DEFAULT NULL,sodium Smallint DEFAULT NULL);
CREATE TABLE bp (bp_id INTEGER  NOT NULL  PRIMARY KEY AUTOINCREMENT DEFAULT 0,user_id INTEGER DEFAULT 0 CONSTRAINT fk_users_id REFERENCES users(user_id) ON DELETE CASCADE,log_date Date DEFAULT NULL,diastolic Smallint DEFAULT NULL,systolic Smallint DEFAULT NULL);
CREATE TABLE body (body_id INTEGER  NOT NULL  PRIMARY KEY AUTOINCREMENT DEFAULT 0,user_id INTEGER DEFAULT 0 CONSTRAINT fk_users_id REFERENCES users(user_id) ON DELETE CASCADE,log_date Date DEFAULT NULL,bicep Float DEFAULT NULL,bmi Float DEFAULT NULL,calf Float DEFAULT NULL,chest Float DEFAULT NULL,fat Float DEFAULT NULL,forearm Float DEFAULT NULL,hips Float DEFAULT NULL,neck Float DEFAULT NULL,thigh Float DEFAULT NULL,waist Float DEFAULT NULL,weight Float DEFAULT NULL);
CREATE TABLE activities (activity_id INTEGER  NOT NULL  PRIMARY KEY AUTOINCREMENT DEFAULT 0,user_id INTEGER  NOT NULL DEFAULT 0 CONSTRAINT fk_users_id REFERENCES users(user_id) ON DELETE CASCADE,log_date Date DEFAULT NULL,steps INTEGER DEFAULT NULL,distance Float DEFAULT NULL,elevation Float DEFAULT NULL,floors Smallint DEFAULT NULL,calories_out INTEGER DEFAULT NULL);
DELETE FROM sqlite_sequence;
INSERT INTO "sqlite_sequence" VALUES('users',0);
INSERT INTO "sqlite_sequence" VALUES('units',0);
INSERT INTO "sqlite_sequence" VALUES('meal_types',0);
INSERT INTO "sqlite_sequence" VALUES('heart',0);
INSERT INTO "sqlite_sequence" VALUES('sleep',0);
INSERT INTO "sqlite_sequence" VALUES('glucose',0);
INSERT INTO "sqlite_sequence" VALUES('foods',0);
INSERT INTO "sqlite_sequence" VALUES('bp',0);
INSERT INTO "sqlite_sequence" VALUES('body',0);
INSERT INTO "sqlite_sequence" VALUES('activities',0);
CREATE INDEX user_id ON sleep  (user_id);
CREATE TRIGGER sleep_user_id_fkd BEFORE DELETE ON users FOR EACH ROW BEGIN DELETE from sleep WHERE user_id = OLD.user_id; END;
CREATE TRIGGER heart_user_id_fkd BEFORE DELETE ON users FOR EACH ROW BEGIN DELETE from heart WHERE user_id = OLD.user_id; END;
CREATE TRIGGER glucose_user_id_fkd BEFORE DELETE ON users FOR EACH ROW BEGIN DELETE from glucose WHERE user_id = OLD.user_id; END;
CREATE TRIGGER glucose_user_id_fki BEFORE INSERT ON glucose FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'Insert on table "glucose" violates a foreign key constraint.  Records in this table must carry a valid value for field "user_id", using a value from field "user_id" in table "users".') WHERE  NEW.user_id IS NOT NULL AND (SELECT user_id FROM users WHERE user_id = new.user_id) IS NULL; END;
CREATE TRIGGER glucose_user_id_fku BEFORE UPDATE ON glucose FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'Update on table "glucose" violates a foreign key constraint.  Records in this table must carry a valid value for field "user_id", using a value from field "user_id" in table "users".') WHERE (SELECT user_id FROM users WHERE user_id = new.user_id) IS NULL; END;
CREATE TRIGGER foods_user_id_fki BEFORE INSERT ON foods FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'Insert on table "foods" violates a foreign key constraint.  Records in this table must carry a valid value for field "user_id", using a value from field "user_id" in table "users".') WHERE  NEW.user_id IS NOT NULL AND (SELECT user_id FROM users WHERE user_id = new.user_id) IS NULL; END;
CREATE TRIGGER foods_user_id_fku BEFORE UPDATE ON foods FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'Update on table "foods" violates a foreign key constraint.  Records in this table must carry a valid value for field "user_id", using a value from field "user_id" in table "users".') WHERE (SELECT user_id FROM users WHERE user_id = new.user_id) IS NULL; END;
CREATE TRIGGER foods_user_id_fkd BEFORE DELETE ON users FOR EACH ROW BEGIN DELETE from foods WHERE user_id = OLD.user_id; END;
CREATE TRIGGER bp_user_id_fki BEFORE INSERT ON bp FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'Insert on table "bp" violates a foreign key constraint.  Records in this table must carry a valid value for field "user_id", using a value from field "user_id" in table "users".') WHERE (SELECT user_id FROM users WHERE user_id = new.user_id) IS NULL; END;
CREATE TRIGGER bp_user_id_fku BEFORE UPDATE ON bp FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'Update on table "bp" violates a foreign key constraint.  Records in this table must carry a valid value for field "user_id", using a value from field "user_id" in table "users".') WHERE  NEW.user_id IS NOT NULL AND (SELECT user_id FROM users WHERE user_id = new.user_id) IS NULL; END;
CREATE TRIGGER bp_user_id_fkd BEFORE DELETE ON users FOR EACH ROW BEGIN DELETE from bp WHERE user_id = OLD.user_id; END;
CREATE TRIGGER body_user_id_fki BEFORE INSERT ON body FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'Insert on table "body" violates a foreign key constraint.  Records in this table must carry a valid value for field "user_id", using a value from field "user_id" in table "users".') WHERE (SELECT user_id FROM users WHERE user_id = new.user_id) IS NULL; END;
CREATE TRIGGER body_user_id_fku BEFORE UPDATE ON body FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'Update on table "body" violates a foreign key constraint.  Records in this table must carry a valid value for field "user_id", using a value from field "user_id" in table "users".') WHERE  NEW.user_id IS NOT NULL AND (SELECT user_id FROM users WHERE user_id = new.user_id) IS NULL; END;
CREATE TRIGGER body_user_id_fkd BEFORE DELETE ON users FOR EACH ROW BEGIN DELETE from body WHERE user_id = OLD.user_id; END;
CREATE TRIGGER activities_user_id_fki BEFORE INSERT ON activities FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'Insert on table "activities" violates a foreign key constraint.  Records in this table must carry a valid value for field "user_id", using a value from field "user_id" in table "users".') WHERE  NEW.user_id IS NOT NULL AND (SELECT user_id FROM users WHERE user_id = new.user_id) IS NULL; END;
CREATE TRIGGER activities_user_id_fku BEFORE UPDATE ON activities FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'Update on table "activities" violates a foreign key constraint.  Records in this table must carry a valid value for field "user_id", using a value from field "user_id" in table "users".') WHERE (SELECT user_id FROM users WHERE user_id = new.user_id) IS NULL; END;
CREATE TRIGGER activities_user_id_fkd BEFORE DELETE ON users FOR EACH ROW BEGIN DELETE from activities WHERE user_id = OLD.user_id; END;
COMMIT;
